#pragma checksum "C:\Users\ssbjvq.GLOBAL\source\repos\Avaliação_PMESP\Avaliação_PMESP\Views\Home\GetImportacao.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "c3b9ce1454d1bde0418f9ad6f2cead70d1c9e507"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Home_GetImportacao), @"mvc.1.0.view", @"/Views/Home/GetImportacao.cshtml")]
[assembly:global::Microsoft.AspNetCore.Mvc.Razor.Compilation.RazorViewAttribute(@"/Views/Home/GetImportacao.cshtml", typeof(AspNetCore.Views_Home_GetImportacao))]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#line 1 "C:\Users\ssbjvq.GLOBAL\source\repos\Avaliação_PMESP\Avaliação_PMESP\Views\_ViewImports.cshtml"
using Avaliação_PMESP;

#line default
#line hidden
#line 2 "C:\Users\ssbjvq.GLOBAL\source\repos\Avaliação_PMESP\Avaliação_PMESP\Views\_ViewImports.cshtml"
using Avaliação_PMESP.Models;

#line default
#line hidden
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"c3b9ce1454d1bde0418f9ad6f2cead70d1c9e507", @"/Views/Home/GetImportacao.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"e27747edd6093431ddcbb309d0672c782189f761", @"/Views/_ViewImports.cshtml")]
    public class Views_Home_GetImportacao : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#line 1 "C:\Users\ssbjvq.GLOBAL\source\repos\Avaliação_PMESP\Avaliação_PMESP\Views\Home\GetImportacao.cshtml"
  
    ViewData["Title"] = "Contact";

#line default
#line hidden
            BeginContext(43, 3129, true);
            WriteLiteral(@"
<div id=""alertas"">

</div>
<br />
<center id=""divBusca"">
    <h2>Busque por inforções usando o ID da Gravação</h2>
    <input type=""number"" id=""numberId"" />
    <button id=""buscar"">Buscar</button>
</center>


<div id=""divTabela"">
    <hr />
    <table class=""table table-dark"">
        <thead>
            <tr>
                <th scope=""col"">ID</th>
                <th scope=""col"">Data Da Entrega</th>
                <th scope=""col"">Descrição</th>
                <th scope=""col"">Quantidade</th>
                <th scope=""col"">Valor Unitario</th>
                <th scope=""col"">Valor Total</th>
            </tr>
        </thead>
        <tbody id=""tabelaErros""></tbody>
    </table>
</div>

<script>
    $(""#divTabela"").hide();
    $(""#buscar"").on('click', function () {
        $(""#divBusca"").hide();
        ajaxCall($('#numberId').val());
        
    });


    function ajaxCall(id) {
        $.ajax({
            url: '/Importacao/GetImportacao/' + id,
            type: ");
            WriteLiteral(@"'GET',
            success: function (dados) {                
              
                    $(""#divTabela"").show();
                   
                        $('#tabelaErros').append(`
                            <tr>
                                <td>${dados.id == null ? ""-"" : dados.id}</td>
                                <td>${dados.dataEntrega == null ? ""-"" : dataFormatada(dados.dataEntrega)}</td>
                                <td>${dados.nomeDoProduto == null ? ""-"" : dados.nomeDoProduto}</td>
                                <td>${dados.quantidade == null ? ""-"" : dados.quantidade}</td>
                                <td>${dados.valorUnit == null ? ""-"" : dados.valorUnit}</td>
                                <td>${Math.round((parseFloat(dados.valorUnit) * parseFloat(dados.quantidade)) * 100) / 100}</td>
                            </tr>
                        `);
                    
               
                
            },
            error: function (data) {
      ");
            WriteLiteral(@"          console.log(data.status);
                if (data.status == 404) {
                    $('#alertas').append('<div class=""alert alert-danger"">Nenhum item gravado no banco de dados com esse ID! Tente outro ID.</div>');
                    setTimeout(() => { document.location.reload(true); }, 3000);
                }
                else if(data.status == 500){
                    $('#alertas').append('<div class=""alert alert-danger"">Erro interno, por favor tente inserir os dados mais tarde!</div>');
                    setTimeout(() => { document.location.reload(true); }, 3000);
                }
                
            }
        });
       
    }
    function dataFormatada(data) {
        var data = new Date(data),
            dia = data.getDate().toString(),
            diaF = (dia.length == 1) ? '0' + dia : dia,
            mes = (data.getMonth() + 1).toString(),
            mesF = (mes.length == 1) ? '0' + mes : mes,
            anoF = data.getFullYear();
        return ");
            WriteLiteral("diaF + \"/\" + mesF + \"/\" + anoF;\r\n    }\r\n    \r\n</script>\r\n");
            EndContext();
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
